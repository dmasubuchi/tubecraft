# n8n Docker環境 Podcast・YouTube自動生成システム設計書（分離型）

## システム概要

本システムは、Podcast・YouTube動画生成を3つの独立したシステムに分割し、すべてDocker環境で動作させる設計です。

1. **コンテンツ生成システム**: 音声・動画の自動生成
2. **コンテンツ管理システム**: 生成物の一覧管理・メタデータ管理
3. **配信システム**: YouTube等への投稿（別システム）

## システムアーキテクチャ

### システム分割構成

```
┌─────────────────────────────────────────────────────────────┐
│                   1. コンテンツ生成システム                    │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  n8n-generator                                        │  │
│  │  ├─ Ollama (Mistral 7B)                             │  │
│  │  ├─ Piper TTS                                       │  │
│  │  ├─ FFmpeg                                          │  │
│  │  └─ Python (moviepy)                                │  │
│  └──────────────────────────────────────────────────────┘  │
│                            ↓                                │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  ローカルストレージ                                    │  │
│  │  /data/media/                                        │  │
│  │  ├─ /audio/                                         │  │
│  │  ├─ /video/                                         │  │
│  │  └─ /metadata/                                      │  │
│  └──────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│                   2. コンテンツ管理システム                    │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  n8n-manager                                         │  │
│  │  ├─ PostgreSQL                                      │  │
│  │  ├─ Web UI (管理画面)                               │  │
│  │  └─ API Server                                      │  │
│  └──────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│                   3. 配信システム（別実装）                    │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  n8n-publisher                                       │  │
│  │  ├─ YouTube API                                     │  │
│  │  ├─ Podcast RSS                                     │  │
│  │  └─ SNS連携                                         │  │
│  └──────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────┘
```

## 1. コンテンツ生成システム

### 1.1 Docker構成

```yaml
# docker-compose.yml (コンテンツ生成システム)
version: '3.8'

services:
  n8n-generator:
    image: n8nio/n8n:latest
    container_name: n8n-generator
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - N8N_EXECUTIONS_PROCESS=main
      - N8N_METRICS=true
    volumes:
      - ./n8n-data:/home/node/.n8n
      - ./data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5678:5678"
    networks:
      - content-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ./ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - content-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres-generator
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n
      - POSTGRES_DB=n8n_generator
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - content-network

  piper-tts:
    build: ./piper-docker
    container_name: piper-tts
    volumes:
      - ./piper-models:/models
      - ./data/audio:/output
    networks:
      - content-network

  media-processor:
    build: ./media-processor
    container_name: media-processor
    volumes:
      - ./data:/data
    networks:
      - content-network

networks:
  content-network:
    driver: bridge

volumes:
  n8n-data:
  ollama-data:
  postgres-data:
  piper-models:
```

### 1.2 Piper TTS Dockerfile

```dockerfile
# piper-docker/Dockerfile
FROM python:3.10-slim

RUN apt-get update && apt-get install -y \
    wget \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# Piper インストール
RUN pip install piper-tts

# 日本語モデルダウンロード
RUN mkdir -p /models
WORKDIR /models
RUN wget https://huggingface.co/rhasspy/piper-voices/resolve/main/ja/ja_JP/takumi/medium/ja_JP-takumi-medium.onnx
RUN wget https://huggingface.co/rhasspy/piper-voices/resolve/main/ja/ja_JP/takumi/medium/ja_JP-takumi-medium.onnx.json

WORKDIR /app
COPY tts_server.py .

CMD ["python", "tts_server.py"]
```

### 1.3 メディア処理 Dockerfile

```dockerfile
# media-processor/Dockerfile
FROM python:3.10-slim

RUN apt-get update && apt-get install -y \
    ffmpeg \
    fonts-noto-cjk \
    && rm -rf /var/lib/apt/lists/*

RUN pip install moviepy pillow numpy pydub

WORKDIR /app
COPY video_generator.py .
COPY audio_processor.py .

CMD ["python", "-m", "http.server", "8000"]
```

### 1.4 n8nワークフロー設計

#### ワークフロー1: エピソード企画生成

```javascript
// バッチ処理トリガー（週次実行）
{
  "nodes": [
    {
      "name": "Weekly Trigger",
      "type": "n8n-nodes-base.cron",
      "parameters": {
        "triggerTimes": {
          "item": [{
            "mode": "everyWeek",
            "hour": 9,
            "minute": 0,
            "weekday": 1
          }]
        }
      }
    },
    {
      "name": "Generate Ideas",
      "type": "n8n-nodes-base.httpRequest",
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": {
          "model": "mistral:7b",
          "prompt": "週刊Podcast用のエピソードアイデアを10個生成してください。",
          "stream": false
        }
      }
    },
    {
      "name": "Save Ideas",
      "type": "n8n-nodes-base.writeBinaryFile",
      "parameters": {
        "fileName": "/data/metadata/ideas_{{$now.format('yyyy-MM-dd')}}.json"
      }
    }
  ]
}
```

#### ワークフロー2: 音声・動画生成バッチ

```javascript
// 音声生成ワークフロー
{
  "nodes": [
    {
      "name": "Load Episode Data",
      "type": "n8n-nodes-base.readBinaryFile",
      "parameters": {
        "filePath": "/data/metadata/episodes_to_generate.json"
      }
    },
    {
      "name": "Generate Script",
      "type": "n8n-nodes-base.httpRequest",
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "bodyParametersJson": {
          "model": "mistral:7b",
          "prompt": "タイトル: {{$json.title}}\n\n15分のPodcast台本を生成してください。"
        }
      }
    },
    {
      "name": "Split Script Sections",
      "type": "n8n-nodes-base.itemLists",
      "parameters": {
        "operation": "splitOutItems",
        "fieldToSplitOut": "sections"
      }
    },
    {
      "name": "Generate Audio",
      "type": "n8n-nodes-base.executeCommand",
      "parameters": {
        "command": "docker exec piper-tts python -c \"import tts; tts.generate('{{$json.text}}', '/output/{{$json.episode_id}}_{{$json.section_id}}.wav')\""
      }
    },
    {
      "name": "Merge Audio Files",
      "type": "n8n-nodes-base.executeCommand", 
      "parameters": {
        "command": "docker exec media-processor python audio_processor.py merge /data/audio/{{$json.episode_id}}_*.wav /data/audio/{{$json.episode_id}}_complete.mp3"
      }
    },
    {
      "name": "Generate Video",
      "type": "n8n-nodes-base.httpRequest",
      "parameters": {
        "method": "POST",
        "url": "http://media-processor:8000/generate_video",
        "bodyParametersJson": {
          "audio_path": "/data/audio/{{$json.episode_id}}_complete.mp3",
          "title": "{{$json.title}}",
          "output_path": "/data/video/{{$json.episode_id}}.mp4"
        }
      }
    },
    {
      "name": "Save Metadata",
      "type": "n8n-nodes-base.writeBinaryFile",
      "parameters": {
        "fileName": "/data/metadata/{{$json.episode_id}}_metadata.json",
        "dataPropertyName": "metadata"
      }
    }
  ]
}
```

### 1.5 ローカルストレージ構造

```
/data/
├── audio/
│   ├── ep001_section1.wav
│   ├── ep001_section2.wav
│   ├── ep001_complete.mp3
│   └── ...
├── video/
│   ├── ep001.mp4
│   ├── ep001_thumbnail.jpg
│   └── ...
└── metadata/
    ├── ep001_metadata.json
    ├── ideas_2024-01-15.json
    └── episodes_to_generate.json
```

## 2. コンテンツ管理システム

### 2.1 Docker構成

```yaml
# docker-compose.yml (管理システム)
version: '3.8'

services:
  n8n-manager:
    image: n8nio/n8n:latest
    container_name: n8n-manager
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
    volumes:
      - ./n8n-manager-data:/home/node/.n8n
      - ../generator/data:/data:ro  # 読み取り専用
    ports:
      - "5679:5678"
    networks:
      - manager-network

  postgres-manager:
    image: postgres:15-alpine
    container_name: postgres-manager
    environment:
      - POSTGRES_USER=manager
      - POSTGRES_PASSWORD=manager
      - POSTGRES_DB=content_manager
    volumes:
      - ./postgres-manager-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - manager-network

  web-ui:
    build: ./web-ui
    container_name: content-web-ui
    volumes:
      - ../generator/data:/data:ro
    ports:
      - "3000:3000"
    networks:
      - manager-network

networks:
  manager-network:
    driver: bridge
```

### 2.2 データベーススキーマ

```sql
-- init-db.sql
CREATE TABLE episodes (
    id VARCHAR(50) PRIMARY KEY,
    title VARCHAR(500) NOT NULL,
    description TEXT,
    script TEXT,
    audio_path VARCHAR(500),
    video_path VARCHAR(500),
    thumbnail_path VARCHAR(500),
    duration INTEGER,
    status VARCHAR(50) DEFAULT 'generated',
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB
);

CREATE TABLE generation_logs (
    id SERIAL PRIMARY KEY,
    episode_id VARCHAR(50) REFERENCES episodes(id),
    step VARCHAR(100),
    status VARCHAR(50),
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_episodes_status ON episodes(status);
CREATE INDEX idx_episodes_generated_at ON episodes(generated_at);
```

### 2.3 管理用n8nワークフロー

```javascript
// コンテンツ一覧取得API
{
  "nodes": [
    {
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "parameters": {
        "path": "api/episodes",
        "responseMode": "onReceived",
        "responseData": "allEntries"
      }
    },
    {
      "name": "Get Episodes",
      "type": "n8n-nodes-base.postgres",
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM episodes ORDER BY generated_at DESC LIMIT 50"
      }
    },
    {
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "parameters": {
        "responseMode": "onReceived",
        "responseCode": 200,
        "responseData": "={{$json}}"
      }
    }
  ]
}
```

## 3. 監視・メンテナンス

### 3.1 ヘルスチェック用Docker Compose

```yaml
# docker-compose.monitoring.yml
version: '3.8'

services:
  healthcheck:
    build: ./healthcheck
    container_name: system-healthcheck
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data:/data:ro
    environment:
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
```

### 3.2 バックアップスクリプト

```bash
#!/bin/bash
# backup.sh

# 日付
DATE=$(date +%Y%m%d_%H%M%S)

# メディアファイルバックアップ
tar -czf /backup/media_${DATE}.tar.gz /data/audio /data/video

# メタデータバックアップ
tar -czf /backup/metadata_${DATE}.tar.gz /data/metadata

# PostgreSQLバックアップ
docker exec postgres-manager pg_dump -U manager content_manager > /backup/db_${DATE}.sql

# 古いバックアップ削除（30日以上）
find /backup -name "*.tar.gz" -mtime +30 -delete
find /backup -name "*.sql" -mtime +30 -delete
```

## 4. セットアップ手順

### 4.1 初期セットアップスクリプト

```bash
#!/bin/bash
# setup.sh

echo "1. ディレクトリ作成"
mkdir -p data/{audio,video,metadata}
mkdir -p n8n-data n8n-manager-data
mkdir -p postgres-data postgres-manager-data
mkdir -p ollama-data piper-models

echo "2. Ollama Mistral 7Bセットアップ"
docker-compose up -d ollama
sleep 10
docker exec ollama ollama pull mistral:7b

echo "3. コンテンツ生成システム起動"
docker-compose -f docker-compose.yml up -d

echo "4. 管理システム起動"
cd manager && docker-compose up -d

echo "セットアップ完了"
echo "生成システム: http://localhost:5678"
echo "管理システム: http://localhost:5679"
echo "Web UI: http://localhost:3000"
```

### 4.2 運用フロー

1. **週次バッチ実行**
   - 月曜朝: アイデア生成バッチ
   - 火曜朝: 台本生成バッチ
   - 水曜朝: 音声・動画生成バッチ

2. **日次確認**
   - 管理システムで生成状況確認
   - エラーログチェック
   - ストレージ容量確認

3. **配信準備**
   - 生成完了したコンテンツを配信システムへ連携
   - メタデータエクスポート

## 5. パフォーマンスチューニング

### 5.1 バッチ処理最適化

```javascript
// 並列処理設定
{
  "executions": {
    "process": "main",
    "mode": "queue",
    "concurrency": 3  // 3つまで並列実行
  }
}
```

### 5.2 リソース制限

```yaml
# Docker リソース制限
services:
  ollama:
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '4'
  
  media-processor:
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '2'
```

## まとめ

この設計により、以下が実現されます：

1. **完全Docker化**: すべてのコンポーネントがコンテナで動作
2. **システム分離**: 生成・管理・配信が独立して動作
3. **バッチ処理**: 定期的な大量コンテンツ生成に最適化
4. **ローカル保存**: すべてのメディアファイルをローカルに保存
5. **拡張性**: 各システムを独立してスケール可能
