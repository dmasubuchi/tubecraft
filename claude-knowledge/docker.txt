# TUBECRAFT Claude Code 開発ガイド

## 🚀 開発環境セットアップ

### 前提条件
- Docker Desktop インストール済み
- VS Code + Claude Code 拡張機能
- Git（オプション）

## 📁 推奨ディレクトリ構造

```bash
TUBECRAFT/
├── claude-knowledge/        # 既存（仕様書等）
├── docker/                 # Docker関連
│   ├── generator/
│   │   ├── Dockerfile
│   │   └── requirements.txt
│   ├── manager/
│   │   └── Dockerfile
│   └── docker-compose.yml
├── src/                    # ソースコード
│   ├── generator/
│   ├── manager/
│   └── common/
├── scripts/               # 実行スクリプト
│   ├── setup.sh
│   ├── start.sh
│   └── stop.sh
├── config/               # 設定ファイル
│   └── .env.example
├── data/                 # データ保存用
│   ├── audio/
│   ├── video/
│   └── metadata/
└── README.md
```

## 🔧 Claude Codeでの作業手順

### Step 1: プロジェクト初期化スクリプト

```bash
#!/bin/bash
# scripts/init-project.sh

echo "🚀 TUBECRAFT プロジェクト初期化開始..."

# ディレクトリ作成
directories=(
    "docker/generator"
    "docker/manager"
    "src/generator"
    "src/manager"
    "src/common"
    "scripts"
    "config"
    "data/audio"
    "data/video"
    "data/metadata"
    "tests"
    "docs"
)

for dir in "${directories[@]}"; do
    mkdir -p "$dir"
    echo "✅ Created: $dir"
done

# .gitignore作成
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.env

# Docker
*.log
docker-compose.override.yml

# Data
data/audio/*
data/video/*
data/metadata/*
!data/audio/.gitkeep
!data/video/.gitkeep
!data/metadata/.gitkeep

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF

# .gitkeepファイル作成
touch data/audio/.gitkeep
touch data/video/.gitkeep
touch data/metadata/.gitkeep

echo "✅ プロジェクト構造の初期化完了！"
```

### Step 2: Docker設定ファイル作成

#### 2.1 メインのdocker-compose.yml

```yaml
# docker/docker-compose.yml
version: '3.8'

services:
  # n8n ワークフローエンジン
  n8n:
    image: n8nio/n8n:latest
    container_name: tubecraft-n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-tubecraft2024}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://n8n:5678/
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ../data:/data
    networks:
      - tubecraft-network
    depends_on:
      - postgres

  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: tubecraft-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-tubecraft}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tubecraft2024}
      - POSTGRES_DB=${POSTGRES_DB:-tubecraft_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tubecraft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tubecraft}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama (LLM)
  ollama:
    image: ollama/ollama:latest
    container_name: tubecraft-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - tubecraft-network
    deploy:
      resources:
        limits:
          memory: 8G
    # GPUを使用する場合はコメントアウトを外す
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all

  # カスタムジェネレーターサービス
  generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    container_name: tubecraft-generator
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-tubecraft}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tubecraft2024}
      - POSTGRES_DB=${POSTGRES_DB:-tubecraft_db}
    volumes:
      - ../src/generator:/app
      - ../data:/data
    networks:
      - tubecraft-network
    depends_on:
      - ollama
      - postgres

volumes:
  n8n_data:
  postgres_data:
  ollama_data:

networks:
  tubecraft-network:
    driver: bridge
```

#### 2.2 環境変数テンプレート

```bash
# config/.env.example
# Database
POSTGRES_USER=tubecraft
POSTGRES_PASSWORD=tubecraft2024
POSTGRES_DB=tubecraft_db

# n8n
N8N_USER=admin
N8N_PASSWORD=tubecraft2024

# Ollama
OLLAMA_MODEL=mistral:7b

# Generator Settings
VIDEO_QUALITY=high
AUDIO_SAMPLE_RATE=44100
MAX_CONCURRENT_JOBS=3

# Storage
DATA_PATH=/data
BACKUP_PATH=/backup
```

### Step 3: 実行スクリプト作成

#### 3.1 セットアップスクリプト

```bash
#!/bin/bash
# scripts/setup.sh

set -e

echo "🔧 TUBECRAFT セットアップ開始..."

# 環境変数ファイルのコピー
if [ ! -f ../config/.env ]; then
    cp ../config/.env.example ../config/.env
    echo "✅ .env ファイルを作成しました"
fi

# Docker ネットワーク作成
docker network create tubecraft-network 2>/dev/null || true

# Ollama モデルのプル
echo "📥 Mistral 7B モデルをダウンロード中..."
docker run --rm -v ollama_data:/root/.ollama ollama/ollama pull mistral:7b

echo "✅ セットアップ完了！"
```

#### 3.2 起動スクリプト

```bash
#!/bin/bash
# scripts/start.sh

cd ../docker

echo "🚀 TUBECRAFT を起動中..."

# Docker Compose 起動
docker-compose up -d

# 起動確認
echo "⏳ サービスの起動を待機中..."
sleep 20

# ヘルスチェック
services=("n8n" "postgres" "ollama")
for service in "${services[@]}"; do
    if docker-compose ps | grep -q "tubecraft-$service.*Up"; then
        echo "✅ $service: 起動成功"
    else
        echo "❌ $service: 起動失敗"
    fi
done

echo ""
echo "📋 アクセス情報:"
echo "- n8n: http://localhost:5678"
echo "- ユーザー: admin"
echo "- パスワード: tubecraft2024"
```

### Step 4: 初期実装（generator/Dockerfile）

```dockerfile
# docker/generator/Dockerfile
FROM python:3.10-slim

WORKDIR /app

# 依存関係インストール
RUN apt-get update && apt-get install -y \
    ffmpeg \
    git \
    && rm -rf /var/lib/apt/lists/*

# Python パッケージ
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# アプリケーションコード
COPY . .

CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

```txt
# docker/generator/requirements.txt
fastapi==0.104.1
uvicorn==0.24.0
httpx==0.25.1
pydantic==2.5.0
sqlalchemy==2.0.23
asyncpg==0.29.0
moviepy==1.0.3
Pillow==10.1.0
```

## 🔄 Claude Codeでの開発フロー

### 1. 初期ファイル生成（Claude Code実行）
```bash
# Claude Codeで以下を実行してもらう
cd /Users/matthew/Documents/GitHub/vs-code-active/TUBECRAFT
bash scripts/init-project.sh
```

### 2. Docker起動（あなたが実行）
```bash
cd scripts
bash setup.sh
bash start.sh
```

### 3. エラー確認・修正（Claude Code実行）
```bash
# ログ確認
docker-compose logs -f

# エラーがあれば、Claude Codeで修正
```

## 🐛 トラブルシューティング

### よくある問題と解決方法

1. **ポート競合**
   ```bash
   # 使用中のポート確認
   lsof -i :5678
   # docker-compose.ymlでポート変更
   ```

2. **メモリ不足**
   ```yaml
   # Docker Desktop設定で増やす
   # または docker-compose.yml で制限
   deploy:
     resources:
       limits:
         memory: 4G
   ```

3. **権限エラー**
   ```bash
   # データディレクトリの権限
   chmod -R 777 data/
   ```

## 📝 Git連携（オプション）

### GitHub リポジトリ作成後
```bash
git init
git add .
git commit -m "Initial commit: TUBECRAFT setup"
git branch -M main
git remote add origin https://github.com/YOUR_USERNAME/tubecraft.git
git push -u origin main
```

## 🎯 次のステップ

1. **基本動作確認**
   - n8nにアクセス（http://localhost:5678）
   - 簡単なワークフロー作成

2. **機能実装**
   - Pythonスクリプト開発
   - n8nワークフロー設計
   - API実装

3. **テスト・最適化**
   - 動画生成テスト
   - パフォーマンス調整
