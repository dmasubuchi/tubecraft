# TUBECRAFT - YouTube自動生成システム開発指示書

## 🎯 エグゼクティブサマリー

TUBECRAFTは、AIを活用してYouTube動画とPodcastを完全自動で生成・投稿するオープンソースシステムです。本プロジェクトは、コンテンツクリエイターの時間的制約を解決し、高品質なコンテンツの大量生産を可能にすることで、YouTube市場における新たな価値創造を目指します。

## 📊 ビジネス背景と市場分析

### 市場の課題
1. **コンテンツ制作の時間的負担**: 1本の動画制作に平均8-12時間
2. **継続的な投稿の困難さ**: 70%のYouTuberが3ヶ月以内に更新停止
3. **収益化の壁**: 登録者1000人、視聴時間4000時間の達成率は全体の10%未満

### ソリューションの価値提案
- **時間削減**: 動画制作時間を95%削減（8時間→24分）
- **継続性**: 完全自動化により365日無休投稿を実現
- **スケーラビリティ**: 1システムで複数チャンネル運営可能

### ターゲットユーザー
1. **Primary**: 個人コンテンツクリエイター（技術系YouTuber）
2. **Secondary**: デジタルマーケティング企業
3. **Tertiary**: 教育コンテンツ配信企業

## 🏗️ システムアーキテクチャ要件

### 技術スタック決定事項

```yaml
Core Technologies:
  - Container: Docker 24.0+
  - Orchestration: docker-compose 2.20+
  - Workflow Engine: n8n latest
  - LLM: Ollama + Mistral 7B
  - Database: PostgreSQL 15
  - TTS: Piper TTS (Japanese model)
  - Video Processing: FFmpeg 6.0 + Python moviepy
  - Storage: Local filesystem (phase 1), S3 compatible (phase 2)
```

### システム構成（3層分離アーキテクチャ）

1. **Generation Layer**: コンテンツ生成エンジン
2. **Management Layer**: コンテンツ管理・メタデータ処理
3. **Distribution Layer**: 配信・公開処理（Phase 2）

## 📋 詳細機能仕様

### Phase 1: MVP (最初の3週間)

#### 1.1 コンテンツ生成機能
```markdown
必須機能:
- [ ] テキスト台本の自動生成（Ollama + Mistral 7B）
- [ ] 音声合成（Piper TTS - 日本語）
- [ ] 基本的な動画生成（静止画 + 音声）
- [ ] メタデータ管理（JSON形式）

性能要件:
- 15分動画の生成時間: 30分以内
- 同時処理可能数: 3本
- 成功率: 95%以上
```

#### 1.2 管理機能
```markdown
必須機能:
- [ ] 生成履歴の一覧表示
- [ ] ステータス管理（生成中/完了/エラー）
- [ ] 基本的なWeb UI（閲覧のみ）
- [ ] ローカルファイル管理
```

### Phase 2: 拡張機能 (次の1ヶ月)

```markdown
追加機能:
- [ ] YouTube API統合
- [ ] 動的動画生成（アニメーション）
- [ ] サムネイル自動生成
- [ ] スケジュール投稿
- [ ] 複数言語対応
- [ ] パフォーマンス分析ダッシュボード
```

## 🔧 エンジニアリングタスク詳細

### Sprint 1 (Week 1): 基盤構築

#### Task 1.1: Docker環境セットアップ
```bash
# ディレクトリ構造
tubecraft/
├── docker/
│   ├── generator/
│   │   ├── Dockerfile
│   │   └── docker-compose.yml
│   ├── manager/
│   │   ├── Dockerfile
│   │   └── docker-compose.yml
│   └── shared/
│       └── .env.example
├── src/
│   ├── generator/
│   ├── manager/
│   └── common/
├── data/
│   ├── audio/
│   ├── video/
│   └── metadata/
├── scripts/
│   ├── setup.sh
│   ├── backup.sh
│   └── health-check.sh
├── docs/
│   ├── ARCHITECTURE.md
│   ├── API.md
│   └── DEPLOYMENT.md
├── tests/
├── .github/
│   └── workflows/
├── README.md
└── LICENSE
```

**具体的実装指示:**
1. マルチステージビルドでイメージサイズ最適化
2. ヘルスチェック必須（全サービス）
3. 環境変数による設定の外部化
4. volumeマウントの最小権限原則

#### Task 1.2: n8n ワークフロー基盤
```javascript
// 必須ワークフローテンプレート
const workflows = {
  "content_generation": {
    trigger: "cron",
    nodes: ["ollama", "piper", "ffmpeg", "storage"],
    errorHandling: "retry-with-backoff"
  },
  "content_management": {
    trigger: "webhook",
    nodes: ["postgres", "validator", "api-response"],
    errorHandling: "dead-letter-queue"
  }
};
```

#### Task 1.3: Ollama統合
```python
# ollama_service.py の仕様
class OllamaService:
    def __init__(self, base_url="http://ollama:11434"):
        self.base_url = base_url
        self.model = "mistral:7b"
        self.timeout = 300  # 5分タイムアウト
        
    async def generate_script(self, 
                            title: str, 
                            duration: int = 15,
                            style: str = "educational") -> Script:
        """
        動画台本を生成
        
        Args:
            title: 動画タイトル
            duration: 動画の長さ（分）
            style: コンテンツスタイル
            
        Returns:
            Script: 構造化された台本オブジェクト
            
        Raises:
            OllamaTimeoutError: タイムアウト時
            OllamaModelError: モデルエラー時
        """
        # 実装必須: プロンプトエンジニアリング
        # セクション分割、タイムスタンプ付与
```

### Sprint 2 (Week 2): コア機能実装

#### Task 2.1: Piper TTS統合
```python
# tts_service.py の仕様
class TTSService:
    def __init__(self):
        self.model_path = "/models/ja_JP-takumi-medium.onnx"
        self.sample_rate = 22050
        self.max_chunk_size = 1000  # 文字数
        
    async def generate_audio(self, 
                           text: str,
                           voice_speed: float = 1.0) -> AudioFile:
        """
        バッチ処理対応の音声生成
        長文は自動分割して処理
        """
```

#### Task 2.2: 動画生成パイプライン
```python
# video_generator.py の仕様
class VideoGenerator:
    def __init__(self):
        self.resolution = (1920, 1080)
        self.fps = 30
        self.codec = "libx264"
        
    async def create_video(self,
                         audio_file: str,
                         script: Script,
                         template: str = "default") -> VideoFile:
        """
        音声と台本から動画を生成
        
        要件:
        - プログレスバー表示
        - メモリ効率的な処理
        - 中断からの再開機能
        """
```

### Sprint 3 (Week 3): 管理システム・品質保証

#### Task 3.1: PostgreSQLスキーマ実装
```sql
-- 必須テーブル定義
CREATE TABLE episodes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(500) NOT NULL,
    description TEXT,
    script JSONB NOT NULL,
    status episode_status NOT NULL DEFAULT 'draft',
    audio_path VARCHAR(1000),
    video_path VARCHAR(1000),
    thumbnail_path VARCHAR(1000),
    duration_seconds INTEGER,
    file_size_mb INTEGER,
    generation_started_at TIMESTAMP,
    generation_completed_at TIMESTAMP,
    error_message TEXT,
    retry_count INTEGER DEFAULT 0,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- インデックス戦略
CREATE INDEX idx_episodes_status_created ON episodes(status, created_at DESC);
CREATE INDEX idx_episodes_generation_date ON episodes(generation_completed_at) 
    WHERE generation_completed_at IS NOT NULL;

-- パーティショニング（月次）
CREATE TABLE episodes_2024_01 PARTITION OF episodes
    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');
```

#### Task 3.2: 監視・ロギング実装
```yaml
# monitoring.yml
monitoring:
  metrics:
    - name: generation_duration
      type: histogram
      buckets: [30, 60, 120, 300, 600]
    - name: generation_success_rate
      type: gauge
    - name: storage_usage_gb
      type: gauge
      
  alerts:
    - name: high_error_rate
      condition: "error_rate > 0.1"
      action: "notify_slack"
    - name: storage_full
      condition: "storage_usage > 0.9"
      action: "cleanup_old_files"
```

## 🔒 セキュリティ要件

### 必須実装項目

1. **シークレット管理**
   ```bash
   # 禁止事項
   - ハードコードされた認証情報
   - Dockerイメージ内の秘密情報
   
   # 必須実装
   - Docker secrets または環境変数
   - .env.example の提供
   - git-secrets によるコミット前チェック
   ```

2. **ネットワークセキュリティ**
   ```yaml
   # docker-compose.yml
   networks:
     internal:
       internal: true  # 外部アクセス禁止
     public:
       external: true  # APIエンドポイントのみ
   ```

3. **アクセス制御**
   - n8n: Basic認証必須
   - API: JWT認証実装
   - ファイルアクセス: 最小権限原則

## 📈 パフォーマンス要件

### SLA目標

```yaml
Performance Targets:
  - API Response Time: p95 < 200ms
  - Video Generation: < 2x realtime (15分動画を30分以内)
  - System Availability: 99.5% (月間ダウンタイム < 3.6時間)
  - Concurrent Processing: 5 videos
  - Storage Efficiency: < 500MB per 15min video
```

### スケーリング戦略

1. **垂直スケーリング**
   - CPU: 最小4コア → 最大16コア
   - RAM: 最小8GB → 最大64GB
   - GPU: オプション（Ollama高速化）

2. **水平スケーリング**
   - ワーカーノード追加（n8n queue mode）
   - 読み取り専用DBレプリカ
   - CDN統合（Phase 2）

## 🚀 デプロイメント戦略

### 環境構成

```bash
# 環境別設定
environments/
├── development/
│   ├── .env
│   └── docker-compose.override.yml
├── staging/
│   ├── .env
│   └── docker-compose.override.yml
└── production/
    ├── .env
    ├── docker-compose.override.yml
    └── backup-strategy.yml
```

### CI/CD パイプライン

```yaml
# .github/workflows/main.yml
name: TUBECRAFT CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          docker-compose -f docker-compose.test.yml up --abort-on-container-exit
          
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Build images
        run: |
          docker build -t tubecraft/generator:${{ github.sha }} .
          docker build -t tubecraft/manager:${{ github.sha }} .
          
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
```

## 📊 成功指標とKPI

### 技術的KPI

1. **品質指標**
   - コードカバレッジ: > 80%
   - 技術的負債: < 5%
   - バグ密度: < 1 bug/1000 LOC

2. **運用指標**
   - デプロイ頻度: 週2回以上
   - MTTR: < 30分
   - 変更失敗率: < 5%

### ビジネスKPI

1. **採用指標**
   - GitHub Star: 6ヶ月で1000+
   - アクティブユーザー: 月間100+
   - コントリビューター: 20+

2. **コンテンツ指標**
   - 生成成功率: > 95%
   - 平均生成時間: < 30分/動画
   - ストレージ効率: < 500MB/動画

## 🎯 プロダクトロードマップ

### Q1 2024: Foundation
- [x] MVP開発完了
- [ ] ドキュメント整備
- [ ] 初期ユーザー獲得（10名）

### Q2 2024: Growth
- [ ] YouTube API統合
- [ ] マルチ言語対応
- [ ] SaaS版β開始

### Q3 2024: Scale
- [ ] エンタープライズ機能
- [ ] API公開
- [ ] マーケットプレイス

### Q4 2024: Monetization
- [ ] 有料プラン開始
- [ ] パートナーシップ
- [ ] Series A準備

## 🔧 開発者向け指示

### コーディング規約

```python
# 必須: Type hints
def generate_content(
    title: str,
    duration_minutes: int = 15,
    style: ContentStyle = ContentStyle.EDUCATIONAL
) -> Tuple[AudioFile, VideoFile]:
    """
    Docstring必須
    
    Args:
        title: 動画タイトル
        duration_minutes: 動画の長さ（分）
        style: コンテンツスタイル
        
    Returns:
        Tuple[AudioFile, VideoFile]: 生成された音声と動画
        
    Raises:
        GenerationError: 生成失敗時
    """
```

### テスト要件

```python
# 最小テストカバレッジ: 80%
# 必須テストタイプ:
# 1. Unit tests (pytest)
# 2. Integration tests (docker-compose)
# 3. E2E tests (Playwright)
# 4. Performance tests (Locust)
```

### ドキュメント要件

1. **コード内ドキュメント**
   - すべての公開関数にdocstring
   - 複雑なロジックにインラインコメント

2. **プロジェクトドキュメント**
   - README.md: クイックスタート
   - ARCHITECTURE.md: システム設計
   - API.md: API仕様
   - CONTRIBUTING.md: 貢献ガイド

## 🚨 リスク管理

### 技術的リスク

| リスク | 影響度 | 発生確率 | 対策 |
|--------|--------|----------|------|
| Ollama応答遅延 | 高 | 中 | タイムアウト設定、キューイング |
| ストレージ枯渇 | 高 | 中 | 自動クリーンアップ、アラート |
| メモリリーク | 中 | 低 | 定期再起動、モニタリング |

### ビジネスリスク

| リスク | 影響度 | 発生確率 | 対策 |
|--------|--------|----------|------|
| YouTube API制限 | 高 | 中 | レート制限実装、複数アカウント |
| 著作権問題 | 高 | 低 | コンテンツ検証、免責事項 |
| 競合出現 | 中 | 高 | 差別化機能、コミュニティ構築 |

## 📝 エンジニアへの最終指示

### 必須実装チェックリスト

- [ ] Dockerマルチステージビルド
- [ ] 環境変数による設定管理
- [ ] エラーハンドリングとリトライ
- [ ] 構造化ロギング（JSON形式）
- [ ] ヘルスチェックエンドポイント
- [ ] Graceful shutdown実装
- [ ] メトリクス収集（Prometheus形式）
- [ ] 自動テスト（カバレッジ80%+）
- [ ] セキュリティスキャン自動化
- [ ] ドキュメント自動生成

### 品質基準

```yaml
Definition of Done:
  - Code review approved by 2+ developers
  - All tests passing (unit, integration, e2e)
  - Documentation updated
  - Security scan passed
  - Performance benchmarks met
  - Deployed to staging environment
  - Product owner acceptance
```

### サポート体制

- **Slack Channel**: #tubecraft-dev
- **Issue Template**: 必須使用
- **PR Template**: 必須使用
- **Weekly Sync**: 毎週月曜 10:00 JST

## 🎉 成功への道

TUBECRAFTは単なるツールではなく、コンテンツクリエイターの創造性を解放するプラットフォームです。技術的卓越性とユーザー体験の両立を追求し、オープンソースコミュニティと共に成長することで、YouTubeエコシステムに革新をもたらします。

**Let's craft the future of content creation together!**
